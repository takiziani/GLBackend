"""
Django settings for ProjetGL project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
import environ
from decouple import config


# Initialize environment variables
env = environ.Env()
environ.Env.read_env()
# Load environment variables from .env file

# # Load the .env file based on the environment
# if os.environ.get('DJANGO_ENV') == 'production':
#     environ.Env.read_env(env_file=os.path.join(os.path.dirname(__file__), '.env.prod'))
# else:
#     environ.Env.read_env(env_file=os.path.join(os.path.dirname(__file__), '.env'))

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if os.getenv('DOCKERIZED'):  # Set this variable in your Docker container
    env_file = os.path.join(BASE_DIR, '..', '.env')  # Using Projet_GL/.env
else:
    # Using BackEnd/.env for local dev
    env_file = os.path.join(BASE_DIR, '.env')

import cloudinary
import cloudinary.uploader
import cloudinary.api

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(BASE_DIR / ".env")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-#n0-tby7x^cj%kf(5t2u+(#&3-^7j76(cp_lod*v0#2k7=1wqp'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# env variables

# Stripe configuration
STRIPE_PUBLIC_KEY = env.str('STRIPE_PUBLIC_KEY')
STRIPE_SECRET_KEY = env.str('STRIPE_SECRET_KEY')
STRIPE_WEBHOOK_SECRET = env.str('STRIPE_WEBHOOK_SECRET')

# IMGBB configuration
IMGBB_API_KEY = env.str('IMGBB_API_KEY')
DEFAULT_THUMBNAIL_URL = env.str('DEFAULT_THUMBNAIL_URL')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'rest_framework',
    'djoser',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',
    'App',
    'drf_spectacular',
    'django_filters',
    'corsheaders',
    "cloudinary",
]

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    'corsheaders.middleware.CorsMiddleware'
]


REST_FRAMEWORK = {

    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication'
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

SPECTACULAR_SETTINGS = {
    'TITLE': 'Django DzSkills',
}


# SWAGGER_SETTINGS = {
#     'USE_SESSION_AUTH': False,
#     'SECURITY_DEFINITIONS': {
#         'Bearer': {
#             'type': 'apiKey',
#             'name': 'Authorization',
#             'in': 'header'
#         }
#     }
# }

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=120),  # Token expiration
    'REFRESH_TOKEN_LIFETIME': timedelta(days=120),
    'ROTATE_REFRESH_TOKENS': True,  # Generate new refresh token on each use
    'BLACKLIST_AFTER_ROTATION': True,  # Prevent reuse of refresh tokens
}


ROOT_URLCONF = 'ProjetGL.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ProjetGL.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': env.str('POSTGRES_DB'),
#         'USER': env.str('POSTGRES_USER'),
#         'PASSWORD': env.str('POSTGRES_PASSWORD'),
#         'HOST': env.str('POSTGRES_HOST', default='localhost'),  # This matches the service name in docker-compose.yml
#         'PORT': '5432',
#     }
# }
env = environ.Env()
environ.Env.read_env()
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('SUPABASE_DB_NAME'),
        'USER': env('SUPABASE_DB_USER'),
        'PASSWORD': env('SUPABASE_DB_PASSWORD'),
        'HOST': env('SUPABASE_DB_HOST'),
        'PORT': env('SUPABASE_DB_PORT', default='5432'),
    }
}

SUPABASE_URL = env('SUPABASE_URL')
SUPABASE_KEY = env('SUPABASE_KEY')
SUPABASE_BUCKET = env('SUPABASE_BUCKET')

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


#<<<<<<< HEAD
#=======
AUTH_USER_MODEL = 'App.User'


#>>>>>>> 11dbe0690906667c1f574f7b9c73cde17b77e459
# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

DJOSER = {
    'SERIALIZERS': {
        'user_create': 'App.serializers.UserCreateSerializers',
        'user_update': 'App.serializers.UpdateUserSerializers',  # For updating user
        'user': 'App.serializers.UserSerializers',  # For retrieving user details
        'current_user': 'App.serializers.UserSerializers',  # For `me` endpoint
    }
}

ALLOWED_HOSTS = ['*']


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


DEFAULT_FROM_EMAIL = 'ostora@gmail.com'

# settings.py
STRIPE_ENDPOINT_SECRET = 'whsec_54090a7eb164b311951aadd3fa9946a88e8363cd639ccd36c198a3490cdd0950'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'stripe': {
            'handlers': ['console'],
            'level': 'DEBUG',
        }
    }
}


SUBSCRIPTION = {
    'PRICE': '100',
    'DURATION': '120',
}


CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:5173",
    "https://gl-frontend-seven.vercel.app",
    # Add other origins as needed
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
    'x-csrftoken',
    'x-requested-with',
]

AUTH_USER_MODEL = 'App.User'


#cloudinary integrations
cloudinary.config(
    cloud_name = env('cloud_name'),
    api_key = env('api_key'),
    api_secret = env('api_secret')
    )